searchData={"items":[{"type":"module","title":"PhoenixImageTools","doc":"PhoenixImageTools is a comprehensive solution for handling responsive images\nin Phoenix applications.\n\nThis library provides tools for:\n- Uploading and processing images\n- Creating multiple image sizes for responsive web applications\n- Converting images to optimized formats (WebP)\n- Providing Phoenix LiveView components for responsive image display\n- Supporting S3-compatible storage","ref":"PhoenixImageTools.html"},{"type":"function","title":"PhoenixImageTools.bucket_name/0","doc":"Returns the configured bucket name for S3 storage.","ref":"PhoenixImageTools.html#bucket_name/0"},{"type":"function","title":"PhoenixImageTools.get_width_from_size/1","doc":"Returns the width for a given size name.","ref":"PhoenixImageTools.html#get_width_from_size/1"},{"type":"function","title":"Examples - PhoenixImageTools.get_width_from_size/1","doc":"iex> PhoenixImageTools.get_width_from_size(:md)\n    1024","ref":"PhoenixImageTools.html#get_width_from_size/1-examples"},{"type":"function","title":"PhoenixImageTools.image_sizes/0","doc":"Returns the configured image sizes.","ref":"PhoenixImageTools.html#image_sizes/0"},{"type":"function","title":"Examples - PhoenixImageTools.image_sizes/0","doc":"iex> PhoenixImageTools.image_sizes()\n    [xs: 320, sm: 768, md: 1024, lg: 1280, xl: 1536]","ref":"PhoenixImageTools.html#image_sizes/0-examples"},{"type":"function","title":"PhoenixImageTools.max_age/0","doc":"Returns the configured cache control max-age value in seconds.","ref":"PhoenixImageTools.html#max_age/0"},{"type":"function","title":"Examples - PhoenixImageTools.max_age/0","doc":"iex> PhoenixImageTools.max_age()\n    31536000","ref":"PhoenixImageTools.html#max_age/0-examples"},{"type":"function","title":"PhoenixImageTools.output_extension/0","doc":"Returns the configured output extension for processed images.","ref":"PhoenixImageTools.html#output_extension/0"},{"type":"function","title":"Examples - PhoenixImageTools.output_extension/0","doc":"iex> PhoenixImageTools.output_extension()\n    \"webp\"","ref":"PhoenixImageTools.html#output_extension/0-examples"},{"type":"function","title":"PhoenixImageTools.stream_image_options/0","doc":"Returns the configured streaming options for image processing.","ref":"PhoenixImageTools.html#stream_image_options/0"},{"type":"function","title":"PhoenixImageTools.thumbnail_options/0","doc":"Returns the configured thumbnail options for image processing.","ref":"PhoenixImageTools.html#thumbnail_options/0"},{"type":"function","title":"PhoenixImageTools.write_image_options/0","doc":"Returns the configured write options for image processing.","ref":"PhoenixImageTools.html#write_image_options/0"},{"type":"module","title":"PhoenixImageTools.Components","doc":"Provides Phoenix LiveView components for displaying responsive images.","ref":"PhoenixImageTools.Components.html"},{"type":"module","title":"Usage - PhoenixImageTools.Components","doc":"```heex\n<.picture\n  versions={[:xs, :sm, :md, :lg, :xl]}\n  base={:original}\n  url_fun={&MyApp.Uploaders.ProfileImageUploader.url({@user.profile_image, @user}, &1)}\n  alt=\"User profile image\"\n  lazy_loading={true}\n  rounded={true}\n  class=\"object-cover\"\n/>\n```","ref":"PhoenixImageTools.Components.html#module-usage"},{"type":"function","title":"PhoenixImageTools.Components.consume_upload/4","doc":"Processes a single uploaded file and prepares it for insertion into database records.\n\nSimilar to `consume_uploads/4` but designed for single file uploads. It expects only\none file to be uploaded at a time.","ref":"PhoenixImageTools.Components.html#consume_upload/4"},{"type":"function","title":"Parameters - PhoenixImageTools.Components.consume_upload/4","doc":"* `socket` - The LiveView socket with uploads\n* `params` - The params map (usually from the form submission)\n* `field_key` - The atom key of the upload field\n* `options` - A keyword list of options\n  * `:generate_name` - When true, generates a unique UUID for the filename (default: false)\n  * `:merge_fun` - A function that merges the uploaded file path into params (default: simple Map.put)","ref":"PhoenixImageTools.Components.html#consume_upload/4-parameters"},{"type":"function","title":"Returns - PhoenixImageTools.Components.consume_upload/4","doc":"The updated params map with the uploaded file merged in.","ref":"PhoenixImageTools.Components.html#consume_upload/4-returns"},{"type":"function","title":"Examples - PhoenixImageTools.Components.consume_upload/4","doc":"```elixir\n# In a LiveView handle_event function\ndef handle_event(\"save\", %{\"user\" => user_params}, socket) do\n  user_params =\n    PhoenixImageTools.Components.consume_upload(\n      socket, \n      user_params, \n      :avatar, \n      generate_name: true\n    )\n  \n  case Accounts.update_user(socket.assigns.user, user_params) do\n    {:ok, user} ->\n      {:noreply, socket |> put_flash(:info, \"Profile updated\") |> assign(:user, user)}\n    \n    {:error, changeset} ->\n      {:noreply, assign_form(socket, changeset)}\n  end\nend\n```\n\nWith custom merge function:\n\n```elixir\n# Custom merge that handles nested params\nmerge_fun = fn params, key, uploaded_file ->\n  put_in(params, [\"profile\", \"{key}\"], uploaded_file)\nend\n\nPhoenixImageTools.Components.consume_upload(\n  socket, \n  user_params, \n  :avatar, \n  generate_name: true,\n  merge_fun: merge_fun\n)\n```","ref":"PhoenixImageTools.Components.html#consume_upload/4-examples"},{"type":"function","title":"PhoenixImageTools.Components.consume_uploads/4","doc":"Processes uploaded files and prepares them for insertion into database records.\n\nThis function helps consume LiveView uploads and merge the results into the \nparams map, making it ready for changesets. It's designed to work with the\n`form_upload_field` component and handles both single and multiple file uploads.","ref":"PhoenixImageTools.Components.html#consume_uploads/4"},{"type":"function","title":"Parameters - PhoenixImageTools.Components.consume_uploads/4","doc":"* `socket` - The LiveView socket with uploads\n* `params` - The params map (usually from the form submission)\n* `field_key` - The atom key of the upload field\n* `options` - A keyword list of options\n  * `:generate_names` - When true, generates unique UUIDs for filenames (default: false)","ref":"PhoenixImageTools.Components.html#consume_uploads/4-parameters"},{"type":"function","title":"Returns - PhoenixImageTools.Components.consume_uploads/4","doc":"The updated params map with the uploaded files merged in.","ref":"PhoenixImageTools.Components.html#consume_uploads/4-returns"},{"type":"function","title":"Examples - PhoenixImageTools.Components.consume_uploads/4","doc":"```elixir\n# In a LiveView handle_event function\ndef handle_event(\"save\", %{\"product\" => product_params}, socket) do\n  product_params =\n    PhoenixImageTools.Components.consume_uploads(\n      socket, \n      product_params, \n      :images, \n      generate_names: true\n    )\n  \n  case Products.create_product(product_params) do\n    {:ok, product} ->\n      {:noreply, socket |> put_flash(:info, \"Product created\") |> push_navigate(to: ~p\"/products\")}\n    \n    {:error, changeset} ->\n      {:noreply, assign_form(socket, changeset)}\n  end\nend\n```\n\nThe files will be available in your changeset as a list of maps in the format:\n\n```elixir\n%{\n  \"0\" => %{\"delete\" => \"false\", \"file\" => \"/path/to/file.jpg\"},\n  \"1\" => %{\"delete\" => \"false\", \"file\" => \"/path/to/another_file.png\"}\n}\n```\n\nThis format is compatible with `cast_attachments/4` from `PhoenixImageTools.Schema`.","ref":"PhoenixImageTools.Components.html#consume_uploads/4-examples"},{"type":"function","title":"PhoenixImageTools.Components.form_upload_field/1","doc":"Renders a file upload field component for handling image uploads with preview.\n\nThis component simplifies the creation of LiveView file upload experiences,\nsupporting both new uploads and displaying previously uploaded images.","ref":"PhoenixImageTools.Components.html#form_upload_field/1"},{"type":"function","title":"Examples - PhoenixImageTools.Components.form_upload_field/1","doc":"```heex\n<.form_upload_field\n  upload={@uploads}\n  name={:images}\n  label=\"Product Images\"\n/>\n```\n\nWith previous uploads and custom cancel action:\n\n```heex\n<.form_upload_field\n  upload={@uploads}\n  name={:profile_image}\n  label=\"Profile Picture\"\n  target={@myself}\n  accept={~w(.jpg .jpeg .png)}\n  max_entries={1}\n>\n  <:previous_uploads>\n    <.inputs_for :let={image_form} field={@form[:images]}>\n      <.hidden_input form={image_form} field={:delete} />\n      <.hidden_input form={image_form} field={:id} />\n      \n       \n         \n           \n         \n         \n           \n            Remove\n           \n         \n       \n    </.inputs_for>\n  </:previous_uploads>\n</.form_upload_field>\n```\n\nIn the LiveView module, you'll need to set up uploads:\n\n```elixir\ndef mount(_params, _session, socket) do\n  socket =\n    socket\n    |> assign_form(...)\n    |> allow_upload(:images, \n        accept: ~w(.jpg .jpeg .png .webp), \n        max_entries: 5, \n        max_file_size: 10_000_000\n      )\n    \n  {:ok, socket}\nend\n\ndef handle_event(\"save\", %{\"entity\" => entity_params}, socket) do\n  entity_params =\n    PhoenixImageTools.Components.consume_uploads(\n      socket, \n      entity_params, \n      :images, \n      generate_names: true\n    )\n    \n  # Continue with saving logic\nend\n\ndef handle_event(\"cancel-upload\", %{\"ref\" => ref}, socket) do\n  {:noreply, cancel_upload(socket, :images, ref)}\nend\n```","ref":"PhoenixImageTools.Components.html#form_upload_field/1-examples"},{"type":"function","title":"Attributes - PhoenixImageTools.Components.form_upload_field/1","doc":"* `upload` - The LiveView uploads map.\n* `name` - The upload field name (must match the field name in allow_upload).\n* `label` - Optional label text for the upload field (defaults to capitalized name).\n* `target` - Optional target for phx events (useful in LiveComponents).\n* `class` - Optional CSS classes to apply to the container.\n* `drop_prompt` - Optional custom prompt for drag and drop area.\n* `accept` - Optional list of allowed file extensions (for information only).\n* `max_entries` - Optional maximum number of files (for information only).\n* `max_file_size_mb` - Optional max file size in MB (for information only).","ref":"PhoenixImageTools.Components.html#form_upload_field/1-attributes"},{"type":"function","title":"Slots - PhoenixImageTools.Components.form_upload_field/1","doc":"* `previous_uploads` - Slot for rendering previously uploaded files.\n* `upload_entry` - Slot for customizing the display of upload entries.","ref":"PhoenixImageTools.Components.html#form_upload_field/1-slots"},{"type":"function","title":"Usage with consume_uploads - PhoenixImageTools.Components.form_upload_field/1","doc":"The companion function `consume_uploads/4` helps process uploaded files and prepare\nthem for insertion into database records. See its documentation for details.","ref":"PhoenixImageTools.Components.html#form_upload_field/1-usage-with-consume_uploads"},{"type":"function","title":"Attributes - PhoenixImageTools.Components.form_upload_field/1","doc":"* `upload` (`:map`) (required) - The LiveView uploads map.\n* `name` (`:atom`) (required) - The upload field name (must match the field name in allow_upload).\n* `label` (`:string`) - Optional label text for the upload field. Defaults to `nil`.\n* `target` (`:any`) - Optional target for phx events (useful in LiveComponents). Defaults to `nil`.\n* `class` (`:string`) - Optional CSS classes to apply to the container. Defaults to `\"\"`.\n* `drop_prompt` (`:string`) - Custom prompt for drag and drop area. Defaults to `\"Drag and drop files or click to browse\"`.\n* `accept` (`:list`) - Optional list of allowed file extensions (for information only). Defaults to `nil`.\n* `max_entries` (`:integer`) - Optional maximum number of files (for information only). Defaults to `nil`.\n* `max_file_size_mb` (`:integer`) - Optional max file size in MB (for information only). Defaults to `nil`.","ref":"PhoenixImageTools.Components.html#form_upload_field/1-attributes"},{"type":"function","title":"Slots - PhoenixImageTools.Components.form_upload_field/1","doc":"* `previous_uploads` - Slot for rendering previously uploaded files.\n* `upload_entry` - Slot for customizing the display of upload entries. Accepts attributes:\n\n  * `entry` (`:map`)","ref":"PhoenixImageTools.Components.html#form_upload_field/1-slots"},{"type":"function","title":"PhoenixImageTools.Components.is_image?/1","doc":"Determines if a file is an image based on its extension.\n\nChecks if a given filename has a supported image extension.","ref":"PhoenixImageTools.Components.html#is_image?/1"},{"type":"function","title":"Parameters - PhoenixImageTools.Components.is_image?/1","doc":"* `file_name` - The filename or path to check","ref":"PhoenixImageTools.Components.html#is_image?/1-parameters"},{"type":"function","title":"Returns - PhoenixImageTools.Components.is_image?/1","doc":"Boolean indicating if the file has a supported image extension","ref":"PhoenixImageTools.Components.html#is_image?/1-returns"},{"type":"function","title":"Examples - PhoenixImageTools.Components.is_image?/1","doc":"```elixir\niex> PhoenixImageTools.Components.is_image?(\"photo.jpg\")\ntrue\n\niex> PhoenixImageTools.Components.is_image?(\"document.pdf\")\nfalse\n```","ref":"PhoenixImageTools.Components.html#is_image?/1-examples"},{"type":"function","title":"PhoenixImageTools.Components.nested_form_box/1","doc":"","ref":"PhoenixImageTools.Components.html#nested_form_box/1"},{"type":"function","title":"Attributes - PhoenixImageTools.Components.nested_form_box/1","doc":"* `title` (`:string`) - Defaults to `nil`.","ref":"PhoenixImageTools.Components.html#nested_form_box/1-attributes"},{"type":"function","title":"Slots - PhoenixImageTools.Components.nested_form_box/1","doc":"* `inner_block` (required)","ref":"PhoenixImageTools.Components.html#nested_form_box/1-slots"},{"type":"function","title":"PhoenixImageTools.Components.picture/1","doc":"Renders a responsive picture element with proper srcset attributes.","ref":"PhoenixImageTools.Components.html#picture/1"},{"type":"function","title":"Attributes - PhoenixImageTools.Components.picture/1","doc":"* `class` - CSS classes to apply to the picture element.\n* `url_fun` - Function to generate URLs for different image versions.\n* `versions` - List of image versions to include in the srcset.\n* `base` - Base version to use as the default image src.\n* `zoom_version` - Version to use for the zoomable view (defaults to base if not provided).\n* `lazy_loading` - Whether to enable lazy loading for the image.\n* `rounded` - Whether to apply rounded corners to the image.\n* `zoomable` - Whether the image should be zoomable.\n* `alt` - Alternative text for the image.\n* `height` - Height attribute for the image (defaults to 500).\n* `width` - Width attribute for the image (defaults to 500).","ref":"PhoenixImageTools.Components.html#picture/1-attributes"},{"type":"function","title":"Attributes - PhoenixImageTools.Components.picture/1","doc":"* `class` (`:any`) - CSS classes to apply to the picture element. Defaults to `nil`.\n* `url_fun` (`:any`) - Function to generate URLs for different image versions.\n* `versions` (`:list`) - List of image versions to include in the srcset.\n* `base` (`:atom`) - Base version to use as the default image src.\n* `zoom_version` (`:atom`) - Version to use for the zoomable view (defaults to base if not provided). Defaults to `nil`.\n* `lazy_loading` (`:boolean`) - Whether to enable lazy loading for the image. Defaults to `false`.\n* `rounded` (`:boolean`) - Whether to apply rounded corners to the image. Defaults to `false`.\n* `zoomable` (`:boolean`) - Whether the image should be zoomable. Defaults to `false`.\n* `alt` (`:string`) - Alternative text for the image. Defaults to `\"\"`.\n* `height` (`:integer`) - Height attribute for the image. Defaults to `500`.\n* `width` (`:integer`) - Width attribute for the image. Defaults to `500`.\n* Global attributes are accepted.","ref":"PhoenixImageTools.Components.html#picture/1-attributes"},{"type":"module","title":"PhoenixImageTools.Schema","doc":"Provides conveniences for schemas working with image uploads.\n\nThis module simplifies the integration of image uploads with Ecto schemas.","ref":"PhoenixImageTools.Schema.html"},{"type":"module","title":"Usage - PhoenixImageTools.Schema","doc":"```elixir\ndefmodule MyApp.Accounts.User do\n  use Ecto.Schema\n  use PhoenixImageTools.Schema\n\n  schema \"users\" do\n    field :name, :string\n    field :profile_image, MyApp.Uploaders.ProfileImageUploader.Type\n    \n    timestamps()\n  end\n\n  def changeset(user, attrs) do\n    user\n    |> cast(attrs, [:name])\n    |> cast_attachments(attrs, [:profile_image], allow_paths: true)\n    |> validate_required([:name, :profile_image])\n  end\nend\n```","ref":"PhoenixImageTools.Schema.html#module-usage"},{"type":"module","title":"PhoenixImageTools.Storage.S3","doc":"An S3 storage adapter for PhoenixImageTools.\n\nThis module provides functionality to upload images to an S3-compatible storage service.","ref":"PhoenixImageTools.Storage.S3.html"},{"type":"module","title":"Configuration - PhoenixImageTools.Storage.S3","doc":"```elixir\nconfig :phoenix_image_tools, :storage,\n  adapter: PhoenixImageTools.Storage.S3,\n  bucket: \"your-bucket-name\",\n  region: \"your-region\"\n\n# Configure ExAws\nconfig :ex_aws,\n  access_key_id: [{:system, \"AWS_ACCESS_KEY_ID\"}, :instance_role],\n  secret_access_key: [{:system, \"AWS_SECRET_ACCESS_KEY\"}, :instance_role]\n```","ref":"PhoenixImageTools.Storage.S3.html#module-configuration"},{"type":"function","title":"PhoenixImageTools.Storage.S3.build_url/1","doc":"Builds a URL for an S3 object.","ref":"PhoenixImageTools.Storage.S3.html#build_url/1"},{"type":"function","title":"PhoenixImageTools.Storage.S3.build_url/3","doc":"","ref":"PhoenixImageTools.Storage.S3.html#build_url/3"},{"type":"function","title":"PhoenixImageTools.Storage.S3.upload_to_complete_set/2","doc":"Uploads a complete set of image sizes to S3.\n\nTakes a Plug.Upload struct and generates all configured image sizes,\nuploading them to S3 with appropriate metadata.\n\nReturns a map with URLs for each size, including a \"default\" and \"thumbnail\" URL.","ref":"PhoenixImageTools.Storage.S3.html#upload_to_complete_set/2"},{"type":"function","title":"Examples - PhoenixImageTools.Storage.S3.upload_to_complete_set/2","doc":"iex> MyApp.Storage.S3.upload_to_complete_set(upload)\n    %{\n      \"320\" => \"https://bucket.s3.amazonaws.com/articles/xs_uuid.webp\",\n      \"768\" => \"https://bucket.s3.amazonaws.com/articles/sm_uuid.webp\",\n      \"1024\" => \"https://bucket.s3.amazonaws.com/articles/md_uuid.webp\",\n      \"1280\" => \"https://bucket.s3.amazonaws.com/articles/lg_uuid.webp\",\n      \"1536\" => \"https://bucket.s3.amazonaws.com/articles/xl_uuid.webp\",\n      \"default\" => \"https://bucket.s3.amazonaws.com/articles/xl_uuid.webp\",\n      \"thumbnail\" => \"https://bucket.s3.amazonaws.com/articles/xs_uuid.webp\"\n    }","ref":"PhoenixImageTools.Storage.S3.html#upload_to_complete_set/2-examples"},{"type":"module","title":"PhoenixImageTools.Uploader","doc":"Provides a macro to define image uploaders with built-in support for\nmultiple image sizes and format conversion.","ref":"PhoenixImageTools.Uploader.html"},{"type":"module","title":"Usage - PhoenixImageTools.Uploader","doc":"```elixir\ndefmodule MyApp.Uploaders.ProfileImageUploader do\n  use PhoenixImageTools.Uploader\n\n  @extension_whitelist ~w(.jpg .jpeg .gif .png .webp)\n\n  def validate({file, _}) do\n    file_extension = file.file_name |> Path.extname() |> String.downcase()\n    Enum.member?(@extension_whitelist, file_extension)\n  end\n\n  def storage_dir(_, {_file, _scope}) do\n    \"uploads/profile_images\"\n  end\nend\n```","ref":"PhoenixImageTools.Uploader.html#module-usage"},{"type":"extras","title":"PhoenixImageTools","doc":"# PhoenixImageTools\n\nA toolkit for efficient image handling in Phoenix applications.\n\n[![Hex.pm](https://img.shields.io/hexpm/v/phoenix_image_tools.svg)](https://hex.pm/packages/phoenix_image_tools)\n[![Hex.pm](https://img.shields.io/hexpm/dt/phoenix_image_tools.svg)](https://hex.pm/packages/phoenix_image_tools)\n[![Hex.pm](https://img.shields.io/hexpm/l/phoenix_image_tools.svg)](https://hex.pm/packages/phoenix_image_tools)\n\nPhoenixImageTools is a library that simplifies image handling in Phoenix applications by providing tools for uploading, processing, and displaying responsive images. It handles automatic resizing, format conversion, and optimized delivery through HTML picture elements with srcset attributes.","ref":"readme.html"},{"type":"extras","title":"Features - PhoenixImageTools","doc":"- 🖼️ **Responsive Images**: Generate multiple image sizes for responsive web design\n- 🚀 **Optimized Format**: Convert images to WebP for better performance\n- 📦 **S3 Integration**: Easy upload to S3 with proper headers and caching\n- 🧩 **LiveView Components**: Ready-to-use Phoenix LiveView components for image display\n- 📱 **Responsive Display**: Built-in support for srcset and picture element\n- 🔍 **Zoom Support**: Optional image zoom functionality\n- 🔄 **Ecto Integration**: Seamless integration with your Ecto schemas","ref":"readme.html#features"},{"type":"extras","title":"Installation - PhoenixImageTools","doc":"Add `phoenix_image_tools` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:phoenix_image_tools, \"~> 0.1.0\"}\n  ]\nend\n```","ref":"readme.html#installation"},{"type":"extras","title":"Configuration - PhoenixImageTools","doc":"","ref":"readme.html#configuration"},{"type":"extras","title":"Basic Configuration - PhoenixImageTools","doc":"```elixir\n# In your config/config.exs\nconfig :phoenix_image_tools,\n  output_format: \"webp\",\n  max_age: 31_536_000, # 1 year\n  image_sizes: [\n    xs: 320,\n    sm: 768,\n    md: 1024,\n    lg: 1280,\n    xl: 1536\n  ]\n```","ref":"readme.html#basic-configuration"},{"type":"extras","title":"S3 Configuration - PhoenixImageTools","doc":"PhoenixImageTools uses ExAws for S3 integration:\n\n```elixir\nconfig :ex_aws,\n  access_key_id: System.get_env(\"AWS_ACCESS_KEY_ID\"),\n  secret_access_key: System.get_env(\"AWS_SECRET_ACCESS_KEY\"),\n  region: System.get_env(\"AWS_REGION\")\n\nconfig :phoenix_image_tools,\n  bucket: \"your-bucket-name\",\n  storage_dir: \"images\"\n```","ref":"readme.html#s3-configuration"},{"type":"extras","title":"Usage - PhoenixImageTools","doc":"","ref":"readme.html#usage"},{"type":"extras","title":"Image Uploader - PhoenixImageTools","doc":"Define your uploader module:\n\n```elixir\ndefmodule MyApp.MediaUploader do\n  use PhoenixImageTools.Uploader\n\n  # Optional: Override storage directory\n  def storage_dir(_, {_file, _scope}) do\n    \"uploads/custom_path\"\n  end\nend\n```","ref":"readme.html#image-uploader"},{"type":"extras","title":"Schema Integration - PhoenixImageTools","doc":"Use the uploader in your Ecto schema:\n\n```elixir\ndefmodule MyApp.Media do\n  use Ecto.Schema\n  use PhoenixImageTools.Schema\n\n  schema \"media\" do\n    field :image, MyApp.MediaUploader.Type\n    timestamps()\n  end\n\n  def changeset(media, attrs) do\n    media\n    |> cast(attrs, [:image])\n    |> cast_attachments(attrs, [:image])\n    |> validate_required([:image])\n  end\nend\n```","ref":"readme.html#schema-integration"},{"type":"extras","title":"Controller Example - PhoenixImageTools","doc":"Upload an image in your controller:\n\n```elixir\ndef create(conn, %{\"media\" => media_params}) do\n  case Media.create_media(media_params) do\n    {:ok, media} ->\n      # Successfully uploaded and processed\n      redirect(to: Routes.media_path(conn, :show, media))\n    {:error, changeset} ->\n      # Handle error\n      render(conn, \"new.html\", changeset: changeset)\n  end\nend\n```","ref":"readme.html#controller-example"},{"type":"extras","title":"LiveView Component - PhoenixImageTools","doc":"Display responsive images in your templates:\n\n```heex\n<.live_component\n  module={PhoenixImageTools.Components.Picture}\n  id={\"media-#{@media.id}\"}\n  url_fun={fn version -> MyApp.MediaUploader.url({@media.image, @media}, version) end}\n  versions={[:xs, :sm, :md, :lg, :xl]}\n  base={:original}\n  lazy_loading={true}\n  rounded={true}\n  zoomable={true}\n  alt=\"Image description\"\n/>\n```","ref":"readme.html#liveview-component"},{"type":"extras","title":"Advanced Configuration - PhoenixImageTools","doc":"","ref":"readme.html#advanced-configuration"},{"type":"extras","title":"Image Processing Options - PhoenixImageTools","doc":"Configure image processing options:\n\n```elixir\nconfig :phoenix_image_tools,\n  thumbnail_options: [],\n  stream_image_options: [\n    suffix: \".webp\",\n    buffer_size: 5_242_880,\n    minimize_file_size: true,\n    quality: 75,\n    effort: 10\n  ],\n  write_image_options: [\n    minimize_file_size: true,\n    quality: 75,\n    effort: 10\n  ]\n```","ref":"readme.html#image-processing-options"},{"type":"extras","title":"Example: Direct Upload - PhoenixImageTools","doc":"Process and upload an image directly:\n\n```elixir\ndef upload_image(%Plug.Upload{} = image_upload) do\n  PhoenixImageTools.upload_image(image_upload)\nend\n```","ref":"readme.html#example-direct-upload"},{"type":"extras","title":"Dependencies - PhoenixImageTools","doc":"PhoenixImageTools relies on the following libraries:\n\n- [Waffle](https://github.com/elixir-waffle/waffle) - For file uploads\n- [Image](https://github.com/elixir-image/image) - For image processing\n- [ExAws](https://github.com/ex-aws/ex_aws) - For S3 integration","ref":"readme.html#dependencies"},{"type":"extras","title":"Contributing - PhoenixImageTools","doc":"Contributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request","ref":"readme.html#contributing"},{"type":"extras","title":"License - PhoenixImageTools","doc":"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.","ref":"readme.html#license"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}